---
  AWSTemplateFormatVersion: '2010-09-09'
  Description: 'Mattermost templates'
  Metadata:
    AWS::CloudFormation::Interface:
      ParameterGroups:
        - Label:
            default: Database
          Parameters:
            - DBTemplateURL
            - DBEngine
            - DBEngineVersion
            - DBInstanceClass
            - DBIops
            - DBMasterUserPassword
            - DBMultiAZ
            - DBPassword
            - DBStorage
            - DBStorageEncrypted
            - DBStorageType
            - ExportRDSBucket
        - Label:
            default: Node
          Parameters:
            - ClusterNodeMax
            - ClusterNodeMin
            - CPUScalingPolicyTargetValue
            - SMTPServer
        - Label:
            default: Networking
          Parameters:
            - CidrBlock
            - InternetFacingLoadBalancer
            - SSLCertificateARN
        - Label:
            default: DNS
          Parameters:
            - CustomDnsName
        - Label:
            default: AWS Quick Start configuration
          Parameters:
            - ExportPrefix

      ParameterLabels:
        CidrBlock:
          default: Permitted IP range
        CloudWatchIntegration:
          default: Enable CloudWatch integration
        CustomDnsName:
          default: Existing DNS name
        DBTemplateURL:
          default: S3 bucket location for DB stack
        DBAcquireIncrement:
          default: DB Acquire Increment
        DBIdleTestPeriod:
          default: DB Idle Test Period
        DBEngine:
          default: Database engine
        DBEngineVersion:
          default: The database engine version to use
        DBInstanceClass:
          default: Database instance class
        DBIops:
          default: RDS Provisioned IOPS
        DBMasterUserPassword:
          default: Master (admin) password *
        DBMaxStatements:
          default: DB Max Statements
        DBMultiAZ:
          default: Enable RDS Multi-AZ deployment
        DBPassword:
          default: Application user database password *, same as DBMasterUserPassword
        DBPoolMaxSize:
          default: DB Pool Maximum Size
        DBPoolMinSize:
          default: DB Pool Minimum Size
        DBPreferredTestQuery:
          default: DB Preferred Test Query
        DBStorage:
          default: Database storage
        DBStorageEncrypted:
          default: Database encryption
        DBStorageType:
          default: Database storage type
        DBTimeout:
          default: DB Timeout
        DBValidate:
          default: DB Validate
        InternetFacingLoadBalancer:
          default: Make instance internet facing
        SSLCertificateARN:
          default: SSL Certificate ARN
        ExportPrefix:
          default: MM identifier
        ExportRDSBucket:
          default: RDS Snapshot Export location
        ClusterNodeMax:
          default: Maximum number of cluster nodes
        ClusterNodeMin:
          default: Minimum number of cluster nodes
        CPUScalingPolicyTargetValue:
          default: ASG Scaling Policy CPU utilization
        SMTPServer:
          default: Mattermost Node SMTP endpoint

  Parameters:
    ExportRDSBucket:
      Description: 'Location to store RDS snapshot exports'
      Type: String
    CidrBlock:
      AllowedPattern: '(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})'
      ConstraintDescription: Must be a valid IP CIDR range of the form x.x.x.x/x.
      Description: CIDR block allowed to access the Atlassian product. This should be set to a trusted IP range; if you want to give public access use '0.0.0.0/0'.
      MinLength: 9
      MaxLength: 18
      Type: String
    CloudWatchIntegration:
      Default: "Metrics Only"
      Type: String
      Description: "Enables CloudWatch metrics with or without log gathering. If cost is an issue, you can disable this altogether."
      AllowedValues: ["Off", "Metrics Only", "Metrics and Logs"]
      ConstraintDescription: "Must be 'Off', 'Metrics Only', or 'Metrics and Logs'"
    CustomDnsName:
      Default: ''
      Description: '(Optional) Use custom existing DNS name for your Data Center instance. This will take precedence over HostedZone. Please note: you must own the domain and configure it to point at the load balancer.'
      Type: String
    DBTemplateURL:
      Description: 'The S3 bucket location for the PostgreSQL Cloudformation stack'
      Type: String
    DBEngine:
      Default: 'Amazon Aurora PostgreSQL'
      Description: 'The database engine to use. The only one currently supported is Amazon Aurora PostgreSQL.'
      AllowedValues:
        - 'Amazon Aurora PostgreSQL'
      ConstraintDescription: Must be 'Amazon Aurora PostgreSQL'.
      Type: String
    DBEngineVersion:
      Default: 10
      AllowedValues:
        - 9
        - 10
      Description: "The database engine version to use; we'll install a suitable minor version for your chosen engine. Make sure that the Confluence version you're installing supports the database engine selected."
      Type: String
    DBInstanceClass:
      Default: db.r4.large
      AllowedValues:
        - db.m5.large
        - db.m5.xlarge
        - db.m5.2xlarge
        - db.m5.4xlarge
        - db.m5.12xlarge
        - db.m5.24xlarge
        - db.m4.large
        - db.m4.xlarge
        - db.m4.2xlarge
        - db.m4.4xlarge
        - db.m4.10xlarge
        - db.m4.16xlarge
        - db.r5.large
        - db.r5.xlarge
        - db.r5.2xlarge
        - db.r5.4xlarge
        - db.r5.12xlarge
        - db.r5.24xlarge
        - db.r4.large
        - db.r4.xlarge
        - db.r4.2xlarge
        - db.r4.4xlarge
        - db.r4.8xlarge
        - db.r4.16xlarge
        - db.t3.medium
        - db.t3.large
        - db.t3.xlarge
        - db.t3.2xlarge
        - db.t2.medium
        - db.t2.large
        - db.t2.xlarge
        - db.t2.2xlarge
      ConstraintDescription: Must be a valid RDS instance class from the list.
      Description: RDS instance type (must be R4 family if using Amazon Aurora).
      Type: String
    DBIops:
      Default: 1000
      ConstraintDescription: Must be in the range 1000 - 30000.
      Description: 'Must be in the range of 1000 - 30000 and a multiple of 1000. This value is only used with Provisioned IOPS. Note: The ratio of IOPS per allocated-storage must be between 3.00 and 10.00. Not used for Amazon Aurora.'
      MinValue: 1000
      MaxValue: 30000
      Type: Number
    DBMasterUserPassword:
      AllowedPattern: >-
        ^(?=^.{8,255}$)(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[^A-Za-z0-9])(?!.*[@/"']).*$
      ConstraintDescription: >-
        Must be at least 8 characters and include 1 uppercase, 1 lowercase, 1 number, and 1 of the following symbols: ! # $ { * : [ = , ] - _ + % &
      Description: "Password for the master ('postgres') account. Must be at least 8 characters and include 1 uppercase, 1 lowercase, 1 number, and 1 of the following symbols: ! # $ { * : [ = , ] - _ + % &"
      MinLength: 8
      MaxLength: 128
      NoEcho: true
      Type: String
    DBMultiAZ:
      Description: When DBEngine is 'PostgreSQL', this will determine whether to provision a multi-AZ RDS instance. When DBEngine is 'Amazon Aurora PostgreSQL', this will determine whether to provision a single or a multiple-node Amazon Aurora cluster.
      Default: "true"
      AllowedValues:
        - "true"
        - "false"
      ConstraintDescription: Must be 'true' or 'false'.
      Type: String
    DBPassword:
      AllowedPattern: '(?=^.{6,255}$)((?=.*\\d)(?=.*[A-Z])(?=.*[a-z])|(?=.*\\d)(?=.*[^A-Za-z0-9])(?=.*[a-z])|(?=.*[^A-Za-z0-9])(?=.*[A-Z])(?=.*[a-z])|(?=.*\\d)(?=.*[A-Z])(?=.*[^A-Za-z0-9]))^.*'
      ConstraintDescription: 'Must be at least 8 characters and include 1 uppercase, 1 lowercase, 1 number, and 1 of the following symbols: ! # $ { * : [ = , ] - _ @ + % &'
      Description: "Database password used by Mattermost node. Must be at least 8 characters and include 1 uppercase, 1 lowercase, 1 number, and 1 of the following symbols: ! # $ { * : [ = , ] - _ @ + % &"
      MinLength: 8
      MaxLength: 128
      NoEcho: true
      Type: String
    DBPoolMaxSize:
      Default: 60
      Description: The maximum number of database connections that can be opened at any time. See https://confluence.atlassian.com/doc/performance-tuning-130289.html for reference on tuning database parameters.
      Type: Number
    DBPoolMinSize:
      Default: 20
      Description: The minimum number of idle database connections that are kept open at any time.
      Type: Number
    DBTimeout:
      Default: 30
      Description: Number of seconds that Connections in excess of minPoolSize should be permitted to remain idle in the pool before being culled.
      Type: Number
    DBIdleTestPeriod:
      Default: 100
      Description: If greater than 0, this is the frequency (in seconds) that c3po will test all idle, pooled but unchecked-out connections.
      Type: Number
    DBMaxStatements:
      Default: 0
      Description: "The size of c3p0's global PreparedStatement cache. It controls the total number of statements cached, for all connections. If set, it should be a fairly large number, as each pooled Connection requires its own, distinct flock of cached statements."
      Type: Number
    DBValidate:
      Default: "false"
      AllowedValues:
        - "true"
        - "false"
      Description: If true, a connection test will be performed at every connection checkout to verify that the connection is valid.
      Type: String
    DBPreferredTestQuery:
      Default: 'select version();'
      Description: The query that will be executed for all connection tests.
      Type: String
    DBAcquireIncrement:
      Default: 1
      Description: Determines how many connections at a time c3p0 will try to acquire when the pool is exhausted.
      Type: Number
    DBStorage:
      Default: 200
      Description: Database allocated storage size, in gigabytes (GB). If you choose Provisioned IOPS, storage should be between 100 and 6144. Not used for Amazon Aurora.
      Type: Number
    DBStorageEncrypted:
      Default: "true"
      AllowedValues:
        - "true"
        - "false"
      Description: Whether or not to encrypt the database.
      Type: String
    DBStorageType:
      Default: General Purpose (SSD)
      AllowedValues:
        - General Purpose (SSD)
        - Provisioned IOPS
      ConstraintDescription: Must be 'General Purpose (SSD)' or 'Provisioned IOPS'.
      Description: Database storage type. Not used for Amazon Aurora.
      Type: String
    InternetFacingLoadBalancer:
      Default: "true"
      AllowedValues: ["true", "false"]
      ConstraintDescription: Must be 'true' or 'false'.
      Description: Controls whether the load balancer should be visible to the internet (true) or only within the VPC (false).
      Type: String
    SSLCertificateARN:
      Default: ''
      Description: "Amazon Resource Name (ARN) of your SSL certificate. If you want to use your own certificate that you generated outside of Amazon, you need to first import it to AWS Certificate Manager. After a successful import, you'll receive the ARN. If you want to create a certificate with AWS Certificate Manager (ACM certificate), you will receive the ARN after it's successfully created."
      MinLength: 0
      MaxLength: 90
      Type: String
    ExportPrefix:
      Default: 'ATL-'
      Description:
          Identifier used in all variables exported from this deployment's Atlassian Standard Infrastructure (VPCID, SubnetIDs, KeyName). Use different 
      Type: String
    ClusterNodeMax:
      Description: Maximum number of nodes in the cluster.
      Default: 1
      Type: Number
    ClusterNodeMin:
      Default: 1
      Description: Minimum number of nodes in the cluster. Set to 1 for new deployment. Can be updated post launch.
      Type: Number
    CPUScalingPolicyTargetValue:
      Default: 75
      Description: CPU Utilization threshold for instances under Auto scaling group
      Type: Number
    SMTPServer:
      Default: 'email-smtp.us-east-2.amazonaws.com'
      Description: SMTP endpoint address for mattermost server
      Type: String

  Conditions:
    DoSSL:
      !Not [!Equals [!Ref SSLCertificateARN, '']]
    EnableCloudWatch:
      !Not [!Equals [!Ref CloudWatchIntegration, 'Off']]
    EnableCloudWatchLogs:
      !Equals [!Ref CloudWatchIntegration, 'Metrics and Logs']
    UseCustomDnsName:
      !Not [!Equals [!Ref CustomDnsName, '']]
    UsePublicIp:
      !Equals [!Ref InternetFacingLoadBalancer, 'true']
    DBEngineAurora:
      !Equals [!Ref DBEngine, "Amazon Aurora PostgreSQL"]
    DBEnginePostgres:
      !Equals [!Ref DBEngine, "PostgreSQL"]

  Mappings:    
    # Supported semantic version mappings taken from:
    # https://confluence.atlassian.com/adminjiraserver/supported-platforms-938846830.html
    SemanticDBVersions:
      PostgreSQL:
        "9": "9.6"
        "10": "10"
        "11": "11"
      AuroraPostgreSQL:
        "9": "9.6.12"
        "10": "10.14"
        "11": "11.4"
    AWSInstanceType2Arch:
      c4.large:
        Arch: HVM64
        Jvmheap: 2304m
      c4.xlarge:
        Arch: HVM64
        Jvmheap: 4608m
      c4.2xlarge:
        Arch: HVM64
        Jvmheap: 12288m
      c4.4xlarge:
        Arch: HVM64
        Jvmheap: 12288m
      c4.8xlarge:
        Arch: HVM64
        Jvmheap: 12288m
      c5.large:
        Arch: HVM64
        Jvmheap: 2048m
      c5.xlarge:
        Arch: HVM64
        Jvmheap: 5120m
      c5.2xlarge:
        Arch: HVM64
        Jvmheap: 12288m
      c5.4xlarge:
        Arch: HVM64
        Jvmheap: 12288m
      c5.9xlarge:
        Arch: HVM64
        Jvmheap: 12288m
      c5.18xlarge:
        Arch: HVM64
        Jvmheap: 12288m
      c5d.large:
        Arch: HVM64
        Jvmheap: 2048m
      c5d.xlarge:
        Arch: HVM64
        Jvmheap: 5120m
      c5d.2xlarge:
        Arch: HVM64
        Jvmheap: 12288m
      c5d.4xlarge:
        Arch: HVM64
        Jvmheap: 12288m
      c5d.9xlarge:
        Arch: HVM64
        Jvmheap: 12288m
      c5d.18xlarge:
        Arch: HVM64
        Jvmheap: 12288m
      d2.xlarge:
        Arch: HVM64
        Jvmheap: 12288m
      d2.2xlarge:
        Arch: HVM64
        Jvmheap: 12288m
      d2.4xlarge:
        Arch: HVM64
        Jvmheap: 12288m
      d2.8xlarge:
        Arch: HVM64
        Jvmheap: 12288m
      h1.2xlarge:
        Arch: HVM64
        Jvmheap: 12288m
      h1.4xlarge:
        Arch: HVM64
        Jvmheap: 12288m
      h1.8xlarge:
        Arch: HVM64
        Jvmheap: 12288m
      h1.16xlarge:
        Arch: HVM64
        Jvmheap: 12288m
      i3.large:
        Arch: HVM64
        Jvmheap: 12288m
      i3.xlarge:
        Arch: HVM64
        Jvmheap: 12288m
      i3.2xlarge:
        Arch: HVM64
        Jvmheap: 12288m
      i3.4xlarge:
        Arch: HVM64
        Jvmheap: 12288m
      i3.8xlarge:
        Arch: HVM64
        Jvmheap: 12288m
      i3.16xlarge:
        Arch: HVM64
        Jvmheap: 12288m
      i3.metal:
        Arch: HVM64
        Jvmheap: 12288m
      m4.large:
        Arch: HVM64
        Jvmheap: 5120m
      m4.xlarge:
        Arch: HVM64
        Jvmheap: 12288m
      m4.2xlarge:
        Arch: HVM64
        Jvmheap: 12288m
      m4.4xlarge:
        Arch: HVM64
        Jvmheap: 12288m
      m4.10xlarge:
        Arch: HVM64
        Jvmheap: 12288m
      m4.16xlarge:
        Arch: HVM64
        Jvmheap: 12288m
      m5.large:
        Arch: HVM64
        Jvmheap: 5120m
      m5.xlarge:
        Arch: HVM64
        Jvmheap: 12288m
      m5.2xlarge:
        Arch: HVM64
        Jvmheap: 12288m
      m5.4xlarge:
        Arch: HVM64
        Jvmheap: 12288m
      m5.12xlarge:
        Arch: HVM64
        Jvmheap: 12288m
      m5.24xlarge:
        Arch: HVM64
        Jvmheap: 12288m
      m5d.large:
        Arch: HVM64
        Jvmheap: 5120m
      m5d.xlarge:
        Arch: HVM64
        Jvmheap: 12288m
      m5d.2xlarge:
        Arch: HVM64
        Jvmheap: 12288m
      m5d.4xlarge:
        Arch: HVM64
        Jvmheap: 12288m
      m5d.12xlarge:
        Arch: HVM64
        Jvmheap: 12288m
      m5d.24xlarge:
        Arch: HVM64
        Jvmheap: 12288m
      r4.large:
        Arch: HVM64
        Jvmheap: 12288m
      r4.xlarge:
        Arch: HVM64
        Jvmheap: 12288m
      r4.2xlarge:
        Arch: HVM64
        Jvmheap: 12288m
      r4.4xlarge:
        Arch: HVM64
        Jvmheap: 12288m
      r4.8xlarge:
        Arch: HVM64
        Jvmheap: 12288m
      r4.16xlarge:
        Arch: HVM64
        Jvmheap: 12288m
      r5.large:
        Arch: HVM64
        Jvmheap: 12288m
      r5.xlarge:
        Arch: HVM64
        Jvmheap: 12288m
      r5.2xlarge:
        Arch: HVM64
        Jvmheap: 12288m
      r5.4xlarge:
        Arch: HVM64
        Jvmheap: 12288m
      r5.12xlarge:
        Arch: HVM64
        Jvmheap: 12288m
      r5.24xlarge:
        Arch: HVM64
        Jvmheap: 12288m
      r5d.large:
        Arch: HVM64
        Jvmheap: 12288m
      r5d.xlarge:
        Arch: HVM64
        Jvmheap: 12288m
      r5d.2xlarge:
        Arch: HVM64
        Jvmheap: 12288m
      r5d.4xlarge:
        Arch: HVM64
        Jvmheap: 12288m
      r5d.12xlarge:
        Arch: HVM64
        Jvmheap: 12288m
      r5d.24xlarge:
        Arch: HVM64
        Jvmheap: 12288m
      t2.medium:
        Arch: HVM64
        Jvmheap: 2048m
      t2.large:
        Arch: HVM64
        Jvmheap: 5120m
      t2.xlarge:
        Arch: HVM64
        Jvmheap: 12288m
      t2.2xlarge:
        Arch: HVM64
        Jvmheap: 12288m
      t3.medium:
        Arch: HVM64
        Jvmheap: 2048m
      t3.large:
        Arch: HVM64
        Jvmheap: 5120m
      t3.xlarge:
        Arch: HVM64
        Jvmheap: 12288m
      t3.2xlarge:
        Arch: HVM64
        Jvmheap: 12288m
      x1.16xlarge:
        Arch: HVM64
        Jvmheap: 12288m
      x1.32xlarge:
        Arch: HVM64
        Jvmheap: 12288m
      x1e.xlarge:
        Arch: HVM64
        Jvmheap: 12288m
      x1e.2xlarge:
        Arch: HVM64
        Jvmheap: 12288m
      x1e.4xlarge:
        Arch: HVM64
        Jvmheap: 12288m
      x1e.8xlarge:
        Arch: HVM64
        Jvmheap: 12288m
      x1e.16xlarge:
        Arch: HVM64
        Jvmheap: 12288m
      x1e.32xlarge:
        Arch: HVM64
        Jvmheap: 12288m
      z1d.large:
        Arch: HVM64
        Jvmheap: 12288m
      z1d.xlarge:
        Arch: HVM64
        Jvmheap: 12288m
      z1d.2xlarge:
        Arch: HVM64
        Jvmheap: 12288m
      z1d.3xlarge:
        Arch: HVM64
        Jvmheap: 12288m
      z1d.6xlarge:
        Arch: HVM64
        Jvmheap: 12288m
      z1d.12xlarge:
        Arch: HVM64
        Jvmheap: 12288m

    AWSRegionArch2AMI:
      ap-northeast-1:
        HVM64: ami-00d101850e971728d
      ap-northeast-2:
        HVM64: ami-08ab3f7e72215fe91
      ap-south-1:
        HVM64: ami-00e782930f1c3dbc7
      ap-southeast-1:
        HVM64: ami-0b5a47f8865280111
      ap-southeast-2:
        HVM64: ami-0fb7513bcdc525c3b
      ca-central-1:
        HVM64: ami-08a9b721ecc5b0a53
      eu-central-1:
        HVM64: ami-0ebe657bc328d4e82
      eu-north-1:
        HVM64: ami-1fb13961
      eu-west-1:
        HVM64: ami-030dbca661d402413
      eu-west-2:
        HVM64: ami-0009a33f033d8b7b6
      eu-west-3:
        HVM64: ami-0ebb3a801d5fb8b9b
      sa-east-1:
        HVM64: ami-058141e091292ecf0
      us-east-1:
        HVM64: ami-0c6b1d09930fac512
      us-east-2:
        HVM64: ami-0ebbf2179e615c338
      us-west-1:
        HVM64: ami-015954d5e5548d13b
      us-west-2:
        HVM64: ami-0cb72367e98845d43
      us-gov-west-1:
        HVM64: ami-e9a9d388
      us-gov-east-1:
        HVM64: ami-a2d938d3

  Resources:
    EncryptionKey:
      DeletionPolicy: Retain
      UpdateReplacePolicy: Retain
      Type: AWS::KMS::Key
      Properties:
        KeyPolicy:
          Version: 2012-10-17
          Id: !Sub "${AWS::StackName}"
          Statement:
            - Effect: Allow
              Principal:
                AWS:
                  - !Sub "arn:${AWS::Partition}:iam::${AWS::AccountId}:root"
              Action: 'kms:*'
              Resource: '*'
            - Effect: Allow
              Principal:
                AWS:
                  - !Sub "${MattermostNodeRole.Arn}"
              Action: 'kms:*'
              Resource: '*'
        Tags:
          - Key: Name
            Value: !Sub ["${StackName} Encryption Key", {StackName: !Ref 'AWS::StackName'}]
    EncryptionKeyAlias:
      Type: AWS::KMS::Alias
      Properties:
        AliasName: !Sub "alias/${AWS::StackName}-ExportKey"
        TargetKeyId: !Ref EncryptionKey
    MatterMostRDSSnapshotExportRole:
      Type: AWS::IAM::Role
      Properties:
        AssumeRolePolicyDocument:
          Version: 2012-10-17
          Statement:
            - Effect: Allow
              Principal:
                Service: [export.rds.amazonaws.com]
              Action: ['sts:AssumeRole']
        Path: /
        Policies:
          - PolicyName: MatterMostRDSSnapshotExportPolicy
            PolicyDocument:
              Version: 2012-10-17
              Statement:
                - Action:
                    - 's3:PutObject*'
                    - 's3:GetObject*'
                    - 's3:DeleteObject*'
                    - 's3:GetBucket*'
                    - 's3:ListBucket'
                  Effect: Allow
                  Resource: 
                    - !Sub "arn:${AWS::Partition}:s3:::${ExportRDSBucket}"
                    - !Sub "arn:${AWS::Partition}:s3:::${ExportRDSBucket}/*"
    MattermostNodeRole:
      Type: AWS::IAM::Role
      Properties:
        AssumeRolePolicyDocument:
          Version: 2012-10-17
          Statement:
            - Effect: Allow
              Principal:
                Service: [ec2.amazonaws.com]
              Action: ['sts:AssumeRole']
        ManagedPolicyArns:
          - !Sub "arn:${AWS::Partition}:iam::aws:policy/AmazonSSMManagedInstanceCore"
          - !Sub "arn:${AWS::Partition}:iam::aws:policy/CloudWatchAgentServerPolicy"
        Path: /
        Policies:
          - PolicyName: MattermostClusterNodePolicy
            PolicyDocument:
              Version: 2012-10-17
              Statement:
                - Action:
                    - 'autoscaling:DescribeTags'
                    - 'autoscaling:CreateOrUpdateTags'
                    - 'ec2:CreateTags'
                    - 'ec2:DescribeInstances'
                    - 'ec2:DescribeTags'
                    - 'route53:ListHostedZones'
                    - 'route53:ListResourceRecordSet'
                    - 'iam:PassRole'
                    - 'rds:CreateDBClusterSnapshot'
                    - 'rds:StartExportTask'
                    - 'rds:DescribeExportTasks'
                    - 'rds:DescribeDBClusterSnapshots'
                    - 'rds:DeleteDBClusterSnapshot'
                  Effect: Allow
                  Resource: ['*']
                - Action:
                    - "route53:ChangeResourceRecordSets"
                  Effect: Allow
                  Resource:
                    - !Sub "arn:${AWS::Partition}:route53:::healthcheck/*"
                    - !Sub "arn:${AWS::Partition}:route53:::change/*"
                    - !Sub "arn:${AWS::Partition}:route53:::hostedzone/*"
                    - !Sub "arn:${AWS::Partition}:route53:::delegationset/*"
                - Action: ['s3:*']
                  Effect: Allow
                  Resource: 
                    - !Sub "arn:${AWS::Partition}:s3:::mattermost-${AWS::AccountId}-${AWS::Region}"
                    - !Sub "arn:${AWS::Partition}:s3:::mattermost-${AWS::AccountId}-${AWS::Region}/*"
                - Action: ['kms:*']
                  Effect: Allow
                  Resource: ['*']
                - Action:
                    - "ses:SendEmail"
                    - "ses:SendRawEmail"
                  Effect: Allow
                  Resource: ['*']
          - PolicyName: SSMParameterPutAccess
            PolicyDocument:
              Version: 2012-10-17
              Statement:
                - Action:
                    - 'ssm:PutParameter'
                  Effect: Allow
                  Resource: !Sub "arn:${AWS::Partition}:ssm:${AWS::Region}:${AWS::AccountId}:parameter/${AWS::StackName}/pinned-ansible-sha"
    MattermostNodeInstanceProfile:
      Type: AWS::IAM::InstanceProfile
      Properties:
        Path: /
        Roles: [!Ref MattermostNodeRole]
    # MattermostS3Bucket:
    #   DeletionPolicy: Retain
    #   Type: AWS::S3::Bucket
    #   Properties:
    #     BucketName: !Sub "mattermost-${AWS::AccountId}-${AWS::Region}"
    #     BucketEncryption:
    #       ServerSideEncryptionConfiguration:
    #         - ServerSideEncryptionByDefault:
    #             SSEAlgorithm: AES256
    
    MattermostClusterAutoScalingGroup:
      Type: AWS::AutoScaling::AutoScalingGroup
      Properties:
        HealthCheckType: EC2
        HealthCheckGracePeriod: 360
        DesiredCapacity: !Ref ClusterNodeMin
        LaunchConfigurationName: !Ref MattermostClusterNodeLaunchConfig
        MaxSize: !Ref ClusterNodeMax
        MinSize: !Ref ClusterNodeMin
        TargetGroupARNs: [!Ref MainTargetGroup]
        VPCZoneIdentifier: !Split
          - ","
          - Fn::ImportValue: !Sub "${ExportPrefix}PriNets"
        Tags:
          - Key: Name
            Value: !Join [' ', [!Ref "AWS::StackName", 'Node']]
            PropagateAtLaunch: true
          - Key: Cluster
            Value: !Ref AWS::StackName
            PropagateAtLaunch: true
      UpdatePolicy:
        AutoScalingRollingUpdate:
          MaxBatchSize: 1
          MinInstancesInService: 1
          MinSuccessfulInstancesPercent: 100
          PauseTime: 'PT5M'
          WaitOnResourceSignals: true
            
    MattermostClusterAutoScalingPolicy:
      Type: AWS::AutoScaling::ScalingPolicy
      Properties:
        AutoScalingGroupName: !Ref MattermostClusterAutoScalingGroup
        PolicyType: TargetTrackingScaling
        TargetTrackingConfiguration:
          PredefinedMetricSpecification:
            PredefinedMetricType: ASGAverageCPUUtilization
          TargetValue: !Ref CPUScalingPolicyTargetValue
  
    MattermostClusterNodeLaunchConfig:
      Type: AWS::AutoScaling::LaunchConfiguration
      Metadata:
        AWS::CloudFormation::Init:
          config:
            files:
              /opt/aws/amazon-cloudwatch-agent/etc/amazon-cloudwatch-agent.json:
                mode: '000740'
                owner: root
                group: root
                content: |
                  {
                    "agent": {
                        "logfile": "/opt/aws/amazon-cloudwatch-agent/logs/amazon-cloudwatch-agent.log",
                        "metrics_collection_interval": 10
                    },
                    "logs": {
                        "force_flush_interval": 15,
                        "log_stream_name": "tri-mattermost-Node-logs_{instance_id}",
                        "logs_collected": {
                            "files": {
                                "collect_list": [
                                    {
                                        "file_path": "/opt/aws/amazon-cloudwatch-agent/logs/amazon-cloudwatch-agent.log",
                                        "log_group_name": "tri-mattermost-Node",
                                        "log_stream_name": "tri-mattermost-Node_{instance_id}",
                                        "timezone": "UTC"
                                    },
                                    {
                                        "file_path": "/opt/aws/amazon-cloudwatch-agent/logs/test.log",
                                        "log_group_name": "tri-mattermost-Node",
                                        "log_stream_name": "testlog",
                                        "timezone": "Local"
                                    },
                                    {
                                        "file_path": "/opt/mattermost_backup.log",
                                        "log_group_name": "tri-mattermost-Node",
                                        "log_stream_name": "mattermost_backup_{instance_id}",
                                        "timezone": "Local"
                                    },
                                    {
                                        "file_path": "/opt/backup_db.log",
                                        "log_group_name": "tri-mattermost-Node",
                                        "log_stream_name": "backup_db_{instance_id}",
                                        "timezone": "Local"
                                    },
                                    {
                                        "file_path": "/var/log/cfn-init.log",
                                        "log_group_name": "tri-mattermost-Node",
                                        "log_stream_name": "cfn_init_{instance_id}",
                                        "timezone": "Local"
                                    },
                                    {
                                        "file_path": "/var/log/cloud-init.log",
                                        "log_group_name": "tri-mattermost-Node",
                                        "log_stream_name": "cloud_init_{instance_id}",
                                        "timezone": "Local"
                                    },
                                    {
                                        "file_path": "/var/log/mattermost_installer.log",
                                        "log_group_name": "tri-mattermost-Node",
                                        "log_stream_name": "mattermost_installer_{instance_id}",
                                        "timezone": "Local"
                                    }
                                ]
                            }
                        }
                    },
                    "metrics": {
                        "aggregation_dimensions": [
                            [
                                "ImageId"
                            ],
                            [
                                "InstanceId",
                                "InstanceType"
                            ],
                            [
                                "d1"
                            ],
                            []
                        ],
                        "append_dimensions": {
                            "AutoScalingGroupName": "${aws:AutoScalingGroupName}",
                            "ImageId": "${aws:ImageId}",
                            "InstanceId": "${aws:InstanceId}",
                            "InstanceType": "${aws:InstanceType}"
                        },
                        "force_flush_interval": 30,
                        "metrics_collected": {
                            "cpu": {
                                "measurement": [
                                    {
                                        "name": "cpu_usage_idle",
                                        "rename": "CPU_USAGE_IDLE",
                                        "unit": "Percent"
                                    },
                                    {
                                        "name": "cpu_usage_iowait",
                                        "unit": "Percent"
                                    },
                                    {
                                        "name": "cpu_usage_system",
                                        "unit": "Percent"
                                    },
                                    {
                                        "name": "cpu_usage_user",
                                        "unit": "Percent"
                                    }
                                ],
                                "metrics_collection_interval": 10,
                                "resources": [
                                    "*"
                                ],
                                "totalcpu": true
                            },
                            "disk": {
                                "append_dimensions": {
                                    "ImageId": "${aws:ImageId}",
                                    "InstanceId": "${aws:InstanceId}",
                                    "InstanceType": "${aws:InstanceType}"
                                },
                                "ignore_file_system_types": [
                                    "devtmpfs",
                                    "sysfs"
                                ],
                                "measurement": [
                                    {
                                        "name": "free",
                                        "rename": "DISK_FREE",
                                        "unit": "Gigabytes"
                                    },
                                    {
                                        "name": "total",
                                        "rename": "DISK_TOTAL",
                                        "unit": "Gigabytes"
                                    },
                                    {
                                        "name": "used",
                                        "rename": "DISK_USED",
                                        "unit": "Gigabytes"
                                    }
                                ],
                                "metrics_collection_interval": 60,
                                "resources": [
                                    "/",
                                    "/tmp"
                                ]
                            },
                            "diskio": {
                                "measurement": [
                                    "io_time",
                                    "read_time",
                                    "reads",
                                    "write_time",
                                    "writes"
                                ],
                                "metrics_collection_interval": 60,
                                "resources": [
                                    "*"
                                ]
                            },
                            "mem": {
                                "measurement": [
                                    "mem_cached",
                                    "mem_total",
                                    "mem_used"
                                ],
                                "metrics_collection_interval": 1
                            },
                            "net": {
                                "measurement": [
                                    "bytes_recv",
                                    "bytes_sent",
                                    "drop_in",
                                    "drop_out"
                                ],
                                "resources": [
                                    "eth0"
                                ]
                            },
                            "netstat": {
                                "measurement": [
                                    "tcp_close",
                                    "tcp_established",
                                    "tcp_syn_sent"
                                ],
                                "metrics_collection_interval": 60
                            },
                            "processes": {
                                "measurement": [
                                    "dead",
                                    "running",
                                    "sleeping"
                                ]
                            },
                            "swap": {
                                "measurement": [
                                    "swap_free",
                                    "swap_used",
                                    "swap_used_percent"
                                ]
                            }
                        },
                        "namespace": "tri-mattermost-Node"
                    }
                  }
              
              /opt/backup_db.sh:
                mode: "000740"
                owner: root
                group: root
                content:
                  !Join
                    - "\n"
                    -
                      - !Sub "#!/bin/bash"
                      - !Sub "CURRENTDATE=$(date '+%Y-%m-%d')"
                      - !Sub ["aws rds create-db-cluster-snapshot --db-cluster-identifier ${dbcluster} --db-cluster-snapshot-identifier ${dbcluster}-$CURRENTDATE --region ${AWS::Region} > dbClusterSnapshot.txt", dbcluster: !GetAtt DB.Outputs.DBClusterIdentifier]
                      - !Sub |
                        SNAPSHOTARN=$(jq '.DBClusterSnapshot.DBClusterSnapshotArn' dbClusterSnapshot.txt)
                        status=$(jq '.DBClusterSnapshot.Status' dbClusterSnapshot.txt)
                        SNAPSHOTID=$(jq '.DBClusterSnapshot.DBClusterSnapshotIdentifier' dbClusterSnapshot.txt)
                        SNAPSHOTID=$(sed -e 's/^"//' -e 's/"$//' <<<"$SNAPSHOTID")
                        SNAPSHOTARN=$(sed -e 's/^"//' -e 's/"$//' <<<"$SNAPSHOTARN")
                        echo 'Generating Snapshot $SNAPSHOTID'
                        while [ $status != "\"available\"" ]
                        do
                            status=$(aws rds describe-db-cluster-snapshots --db-cluster-snapshot-identifier $SNAPSHOTID --region ${AWS::Region} | jq '.DBClusterSnapshots[0].Status')
                            sleep 5s
                        done
                        echo 'Exporting Snapshot $SNAPSHOTID'
                        exportStatus=$(aws rds start-export-task --export-task-identifieraws-mattermost-export-$CURRENTDATE --source-arn $SNAPSHOTARN --s3-bucket-name ${ExportRDSBucket} --iam-role-arn ${MatterMostRDSSnapshotExportRole.Arn} --kms-key-id ${EncryptionKey} --region ${AWS::Region} | jq '.Status')
                        while [ $exportStatus != "\"COMPLETE\"" ]
                        do
                            exportStatus=$(aws rds describe-export-tasks  --export-task-identifieraws-mattermost-export-$CURRENTDATE --region ${AWS::Region} | jq '.ExportTasks[0].Status')
                            sleep 25s
                        done
                        echo 'Deleting Snapshot $SNAPSHOTID'
                        aws rds delete-db-cluster-snapshot --db-cluster-snapshot-identifier $SNAPSHOTID --region ${AWS::Region}

              /opt/mattermost_installer.sh:
                mode: "000740"
                owner: root
                group: root
                content:
                  !Join
                    - "\n"
                    -
                      - sudo yum update -y
                      - cd /home/ssm-user/
                      - wget https://releases.mattermost.com/5.27.0/mattermost-5.27.0-linux-amd64.tar.gz
                      - tar -xvzf mattermost-5.27.0-linux-amd64.tar.gz
                      - sudo mv mattermost /opt
                      - sudo useradd --system --user-group mattermost
                      - !Sub ["sudo sed -i 's@SiteURL\": \"\"@SiteURL\": \"${FQDN}\"@g' /opt/mattermost/config/config.json", FQDN: "https://mattermost.devx.systems"]
                      - !Sub ["sudo sed -i 's@ListenAddress\": \":8065\",@ListenAddress\": \":${ListenPort}\",@g' /opt/mattermost/config/config.json", ListenPort: "8443"]
                      - !Sub ["sudo sed -i 's@DriverName\": \"mysql\",@DriverName\": \"${DriverType}\",@g' /opt/mattermost/config/config.json", DriverType: "postgres"]
                      - !Sub ["sudo sed -i 's^DataSource\": .*^DataSource\": \"postgres://mattermostmaster:${DBPassword}@${RDSEndPoints}\",^g' /opt/mattermost/config/config.json",RDSEndPoints: !GetAtt DB.Outputs.RDSEndPoints]
                      - !Sub ["sudo sed -i 's@FeedbackName\": \"\"@FeedbackName\": \"${FeedbackName}\"@g' /opt/mattermost/config/config.json", FeedbackName: "No-Reply"]
                      - SMTPUserName=$(aws --region us-east-2 ssm get-parameter --name MATTERMOST_SMTP_ACCESSKEY --with-decryption | jq '.Parameter.Value' | sed -e 's/^"//' -e 's/"$//')
                      - SMTPPassword=$(aws --region us-east-2 ssm get-parameter --name MATTERMOST_SMTP_SECRETKEY --with-decryption | jq '.Parameter.Value' | sed -e 's/^"//' -e 's/"$//')
                      - !Sub |
                        sudo cat /opt/mattermost/config/config.json | jq '.EmailSettings.SendEmailNotifications=true' | \
                        jq '.EmailSettings.EnableSMTPAuth=true' | jq '.EmailSettings.FeedbackEmail="no-reply@devx.systems"' |  \
                        jq '.EmailSettings.ConnectionSecurity="STARTTLS"' |  jq --arg SMTPUserName $SMTPUserName '.EmailSettings.SMTPUsername=$SMTPUserName' |  \
                        jq '.EmailSettings.SMTPPort="587"' |  jq --arg SMTPPassword $SMTPPassword '.EmailSettings.SMTPPassword=$SMTPPassword' |  \
                        jq '.EmailSettings.SkipServerCertificateVerification=true' | jq --arg SMTPServer ${SMTPServer} '.EmailSettings.SMTPServer=$SMTPServer' > temp.json
                      - if [ -s temp.json ]; then sudo mv temp.json /opt/mattermost/config/config.json; fi
                      - sudo chown -R mattermost:mattermost /opt/mattermost
                      - sudo chmod -R g+w /opt/mattermost
                      - !Sub |
                        sudo cat > /etc/systemd/system/mattermost.service <<EOF
                        [Unit]
                        Description=Mattermost
                        After=syslog.target network.target postgresql-9.4.service
                        [Service]
                        Type=notify
                        WorkingDirectory=/opt/mattermost
                        User=mattermost
                        ExecStart=/opt/mattermost/bin/mattermost
                        PIDFile=/var/spool/mattermost/pid/master.pid
                        TimeoutStartSec=3600
                        LimitNOFILE=49152
                        [Install]
                        WantedBy=multi-user.target
                        EOF
                      - sudo chmod 664 /etc/systemd/system/mattermost.service
                      - sudo systemctl daemon-reload
                      - sudo systemctl enable mattermost
                      - sudo systemctl start mattermost
              
              /opt/mattermost_email_template.txt:
                mode: "000644"
                owner: root
                group: root
                content:
                  !Join
                    - "\n"
                    -
                      - !Sub |
                        From: "DevX Mattermost" <no-reply@devx.systems>
                        To: dmr0ghn5sr50mkj2qfde69cg4r@smtp-mt.smarsh.cloud
                        Cc: tri.mattermost.dxacct@devx.systems
                        Subject: Mattermost Daily Export
                        Content-Type: multipart/mixed;
                            boundary="b3f166a86b56ff6c37755292d690675717ea3cd9de81228ec2b76ed4a15d6d1a"
                        
                        --b3f166a86b56ff6c37755292d690675717ea3cd9de81228ec2b76ed4a15d6d1a
                        Content-Type: text/plain; charset=iso-8859-1
                        Content-Transfer-Encoding: quoted-printable

                        Please see the attached file for the exported Mattermost data.

                        --b3f166a86b56ff6c37755292d690675717ea3cd9de81228ec2b76ed4a15d6d1a
                        Content-Type: application/json; name="EXPORT_FILE_NAME"
                        Content-Description: EXPORT_FILE_NAME
                        Content-Disposition: attachment;filename="EXPORT_FILE_NAME";
                        Content-Transfer-Encoding: base64

                        BASE64_EXPORT_FILE

                        --b3f166a86b56ff6c37755292d690675717ea3cd9de81228ec2b76ed4a15d6d1a--
              
              /opt/mattermost_backup_error_email_template.txt:
                mode: "000644"
                owner: root
                group: root
                content:
                  !Join
                    - "\n"
                    -
                      - !Sub |
                        From: "DevX Mattermost" <no-reply@devx.systems>
                        To: tri.mattermost.dxacct@devx.systems
                        Subject: Error in Mattermost Daily Export
                        Content-Type: text/plain; charset=iso-8859-1
                        Content-Transfer-Encoding: quoted-printable
                            boundary="c3f166a86b56ff6c37755292d690675717ea3cd9de81228ec2b76ed4a15d6d1a"

                        The following error occurred in the Mattermost daily export to Smarsh server from Mattermost EC2 instance of tri-dev-mgmt-tools account:

                        ERROR_MESSAGE

              /opt/mattermost_backup.sh:
                mode: "000740"
                owner: root
                group: root
                content:
                  !Join
                    - "\n"
                    -
                      - !Sub "#!/bin/bash"
                      - !Sub |
                        function sendErrorAlertEmail {
                            echo "Errors detected. Sending an alert email..."
                            sed -f - mattermost_backup_error_email_template.txt > error-email.txt << EOF
                              s|ERROR_MESSAGE|$(cat mattermost_backup_error.log | sed ':a;N;$!ba;s/\n/\\n/g')|g
                        EOF
                            BASE64_MESSAGE=$( base64 error-email.txt )
                            SES_INPUT=$(cat <<EOF
                            {
                                "Data": "$BASE64_MESSAGE"
                            }
                        EOF
                            )
                            echo $SES_INPUT > ses-error-input.json    
                            
                            aws --region us-east-2 ses send-raw-email --raw-message file://ses-error-input.json

                            sudo rm error-email.txt
                            sudo rm ses-error-input.json
                        }

                        function sendEmptyExportErrorAlert {
                            echo "The Mattermost export file was empty. Sending an alert email..."
                            sed -f - mattermost_backup_error_email_template.txt > error-email.txt << EOF
                              s|ERROR_MESSAGE|The Mattermost export file was empty|g
                        EOF
                            BASE64_MESSAGE=$( base64 error-email.txt )
                            SES_INPUT=$(cat <<EOF
                            {
                                "Data": "$BASE64_MESSAGE"
                            }
                        EOF
                            )
                            echo $SES_INPUT > ses-error-input.json

                            aws --region us-east-2 ses send-raw-email --raw-message file://ses-error-input.json

                            sudo rm error-email.txt
                            sudo rm ses-error-input.json
                        }

                        function calculateBackupDeltas {
                            if [ -s $PREV_BULK_EXPORT_FILE_NAME ]
                            then
                                echo "Calculating delta of current and previous backup..."
                                grep -Fxvf $PREV_BULK_EXPORT_FILE_NAME $CURR_BULK_EXPORT_FILE_NAME > $BACKUP_FILE_NAME
                                sudo rm -f $PREV_BULK_EXPORT_FILE_NAME
                            else
                                echo "No previous backups found. Preparing bulk export..."
                                sudo cp $CURR_BULK_EXPORT_FILE_NAME $BACKUP_FILE_NAME
                            fi
                        }

                        cd /opt

                        echo "Exporting Mattermost data..."
                        PREV_BULK_EXPORT_FILE_NAME=mattermost_bulk_export_$( date '+%m_%d_%Y' -d '-1 days' ).json
                        PREV_BACKUP_FILE_NAME=mattermost_backup_$( date '+%m_%d_%Y' -d '-1 days' ).json
                        CURR_BULK_EXPORT_FILE_NAME=mattermost_bulk_export_$( date '+%m_%d_%Y' ).json
                        BACKUP_FILE_NAME=mattermost_backup_$( date '+%m_%d_%Y' ).json
                        sudo ./mattermost/bin/mattermost export bulk $CURR_BULK_EXPORT_FILE_NAME --all-teams

                        echo "Preparing the mattermost export email..."
                        calculateBackupDeltas
                        BASE64_ATTACHMENT=$( base64 -w 0 $BACKUP_FILE_NAME )

                        sed -f - mattermost_email_template.txt > backup-email.txt << EOF
                            s|EXPORT_FILE_NAME|$BACKUP_FILE_NAME|g
                            s|BASE64_EXPORT_FILE|$BASE64_ATTACHMENT|g
                        EOF
                        BASE64_MESSAGE=$( base64 backup-email.txt )

                        SES_INPUT=$(cat <<EOF
                        {
                            "Data": "$BASE64_MESSAGE"
                        }
                        EOF
                        )
                        echo $SES_INPUT > ses-input.json

                        echo "Sending email with mattermost export as attachment..."
                        {
                          aws --region us-east-2 ses send-raw-email --raw-message file://ses-input.json
                        } 2> >(tee mattermost_backup_error.log  >&2)

                        # Error Handling
                        if [ -s mattermost_backup_error.log ]
                        then
                            sendErrorAlertEmail
                        elif [ ! -s $BACKUP_FILE_NAME ]
                        then
                            sendEmptyExportErrorAlert
                        else
                            echo "No errors detected. Backup complete."
                        fi

                        sudo rm backup-email.txt
                        sudo rm ses-input.json
                        if [ -f $PREV_BACKUP_FILE_NAME ]
                        then
                            sudo rm -f $PREV_BACKUP_FILE_NAME
                        fi

            commands:
              070_install_cloudwatch_agent:
                command: sudo /opt/aws/amazon-cloudwatch-agent/bin/amazon-cloudwatch-agent-ctl -a fetch-config -m ec2 -s -c file:/opt/aws/amazon-cloudwatch-agent/etc/amazon-cloudwatch-agent.json
                ignoreErrors: false
              071_install_mattermost:
                command: ./opt/mattermost_installer.sh > /var/log/mattermost_installer.log
                ignoreErrors: true
      Properties:
        IamInstanceProfile: !Ref MattermostNodeInstanceProfile
        ImageId: ami-0603cbe34fd08cb81
        InstanceType: t3.xlarge
        # KeyName: !Ref SSHKey
        SecurityGroups : 
          - !GetAtt "SecurityGroup.GroupId"
        # we install our web server with user data
        UserData:
          Fn::Base64:
            !Sub |
              #!/bin/bash
              # Get the latest CloudFormation package
              yum update -y aws-cfn-bootstrap 
              # install jq
              yum install -y jq
              #installing cloudwatch agent
              sudo yum install amazon-cloudwatch-agent -y
              # install aws cli version 2
              curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
              unzip awscliv2.zip
              rm -f /bin/aws
              rm -rf /aws-cli/
              ./aws/install -b /bin -i /aws-cli --update
              # setup crontab
              crontab -l | { cat; echo "0 0 3 * * /opt/backup_db.sh > /opt/backup_db.log 2>&1"; }| crontab -
              crontab -l | { cat; echo "0 0 * * * /opt/mattermost_backup.sh > /opt/mattermost_backup.log 2>&1"; }| crontab -
              service crond start
              chkconfig crond on
              # Start cfn-init
              /opt/aws/bin/cfn-init --stack ${AWS::StackName} --resource MattermostClusterNodeLaunchConfig --region ${AWS::Region}
              /opt/aws/bin/cfn-signal -s true --stack ${AWS::StackName} --resource MattermostClusterAutoScalingGroup --region ${AWS::Region}

    # Database
    DB:
      Type: AWS::CloudFormation::Stack
      Properties:
        TemplateURL: !Ref DBTemplateURL
        Parameters:
          CustomDBSecurityGroup: !Ref SecurityGroup
          DBAllocatedStorageEncrypted: !Ref DBStorageEncrypted
          DBBackupRetentionPeriod: "1"
          DBEngineVersion: !FindInMap [SemanticDBVersions, AuroraPostgreSQL, !Ref DBEngineVersion]
          DBInstanceClass: !Ref DBInstanceClass
          DBMasterUsername: mattermostmaster
          DBMasterUserPassword: !Ref DBMasterUserPassword
          DBMultiAZ: !Ref DBMultiAZ
          DBName: 'mattermostdb'
          DBPort: '5432'
          EnableEventSubscription: 'false'
          Subnet1ID: !Select
            - 0
            - !Split
              - ","
              - Fn::ImportValue: !Sub "${ExportPrefix}PriNets"
          Subnet2ID: !Select
            - 1
            - !Split
              - ","
              - Fn::ImportValue: !Sub "${ExportPrefix}PriNets"
          VPCID:
            Fn::ImportValue: !Sub "${ExportPrefix}VPCID"
    
  # Loadbalancer
    LoadBalancer:
      Type: AWS::ElasticLoadBalancingV2::LoadBalancer
      Properties:
        LoadBalancerAttributes:
          - Key: idle_timeout.timeout_seconds
            Value: '300'
        Scheme: !If [UsePublicIp, 'internet-facing', 'internal']
        SecurityGroups: [!Ref SecurityGroup]
        Subnets: !Split
          - ","
          - Fn::ImportValue: !Sub "${ExportPrefix}PubNets"
        Tags:
          - Key: Name
            Value: !Sub ["${StackName}-LoadBalancer", StackName: !Ref 'AWS::StackName']
          - Key: Cluster
            Value: !Ref AWS::StackName

    LoadBalancerHTTPListener:
      Type: AWS::ElasticLoadBalancingV2::Listener
      Properties:
        DefaultActions:
          - !If
            - DoSSL
            - Type: redirect
              RedirectConfig:
                Protocol: HTTPS
                Port: '443'
                Host: '#{host}'
                Path: '/#{path}'
                Query: '#{query}'
                StatusCode: HTTP_301
            - Type: forward
              TargetGroupArn: !Ref MainTargetGroup
        LoadBalancerArn: !Ref LoadBalancer
        Port: 80
        Protocol: HTTP
    LoadBalancerHTTPSListener:
      Condition: DoSSL
      Type: AWS::ElasticLoadBalancingV2::Listener
      Properties:
        Certificates:
          - CertificateArn: !Ref SSLCertificateARN
        DefaultActions:
          - Type: forward
            TargetGroupArn: !Ref MainTargetGroup
        LoadBalancerArn: !Ref LoadBalancer
        Port: 443
        Protocol: HTTPS
    
    MainTargetGroup:
      Type: AWS::ElasticLoadBalancingV2::TargetGroup
      Properties:
        Port: 8443
        Protocol: HTTP
        VpcId:
          Fn::ImportValue: !Sub "${ExportPrefix}VPCID"
        HealthCheckIntervalSeconds: 20
        HealthCheckTimeoutSeconds: 10
        HealthyThresholdCount: 2
        Matcher:
          HttpCode: '200'
        HealthCheckPath: '/'
        HealthCheckPort: 8443
        HealthCheckProtocol: HTTP
        TargetGroupAttributes:
          - Key: stickiness.enabled
            Value: 'true'
          - Key: stickiness.type
            Value: lb_cookie
          - Key: deregistration_delay.timeout_seconds
            Value: '30'
        Tags:
          - Key: Name
            Value: MainTargetGroup
          - Key: Cluster
            Value: !Ref AWS::StackName
      DependsOn:
        - LoadBalancer
    SecurityGroup:
      Type: AWS::EC2::SecurityGroup
      Properties:
        GroupDescription: Security group allowing SSH and HTTP/HTTPS access
        SecurityGroupIngress:
          - IpProtocol: tcp
            FromPort: 80
            ToPort: 80
            CidrIp: !Ref CidrBlock
          - IpProtocol: tcp
            FromPort: 443
            ToPort: 443
            CidrIp: !Ref CidrBlock
        Tags:
          - Key: Name
            Value: !Join [' ', [!Ref "AWS::StackName", 'sg']]
        VpcId:
          Fn::ImportValue: !Sub "${ExportPrefix}VPCID"
    SecurityGroupIngress5432:
      Type: AWS::EC2::SecurityGroupIngress
      Properties:
        GroupId: !Ref SecurityGroup
        IpProtocol: tcp
        FromPort: 5432
        ToPort: 5432
        SourceSecurityGroupId: !Ref SecurityGroup
    SecurityGroupIngress8443:
      Type: AWS::EC2::SecurityGroupIngress
      Properties:
        GroupId: !Ref SecurityGroup
        IpProtocol: tcp
        FromPort: 8443
        ToPort: 8443
        SourceSecurityGroupId: !Ref SecurityGroup
  # # Optional: CloudWatch dashboard to be created when CloudWatch is enabled
  #   CloudWatchDashboard:
  #     DependsOn:
  #       - DB
  #     Condition: EnableCloudWatch
  #     Type: AWS::CloudFormation::Stack
  #     Properties:
  #       TemplateURL: !Sub
  #         - https://${QSS3BucketName}.${QSS3Region}.amazonaws.com/${QSS3KeyPrefix}submodules/quickstart-atlassian-services/templates/quickstart-cloudwatch-dashboard.yaml
  #         # - QSS3Region: !If ["GovCloudCondition", "s3-us-gov-west-1", "s3"]
  #       Parameters:
  #         ProductStackName: !Sub "${AWS::StackName}"
  #         ProductFamilyName: "mattermost"
  #         AsgToMonitor: !Ref ClusterNodeGroup

    MattermostTeamsArchivalLambdaFunctionExecutionRole:
      Type: AWS::IAM::Role
      Properties:
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Principal:
                Service:
                - 'lambda.amazonaws.com'
              Action: 'sts:AssumeRole'
        ManagedPolicyArns:
          - !Sub ${MattermostTeamsArchivalLambdaFunctionExecutionPolicy}

    MattermostTeamsArchivalLambdaFunctionExecutionPolicy:
      Type: AWS::IAM::ManagedPolicy
      Properties:
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Action:
                - logs:CreateLogGroup
              Resource: "arn:aws:logs:*:558906589458:*"
            - Effect: Allow
              Action:
                - logs:CreateLogStream
                - logs:PutLogEvents
              Resource: "arn:aws:logs:*:558906589458:log-group:*"
            - Effect: Allow
              Action:
                - ssm:GetCommandInvocation
              Resource: "*"
            - Effect: Allow
              Action:
                - ssm:SendCommand
              Resource: [
                "arn:aws:ec2:us-east-2:*:instance/*",
                "arn:aws:ssm:us-east-2:*:document/*"
              ]
              
    MattermostTeamsArchivalExecutionLambdaFunction:
      Type: AWS::Lambda::Function
      Properties:
        Environment:
          Variables:
            INSTANCE_NAME: !Join [' ', [!Ref "AWS::StackName", 'Node']]
        Handler: index.lambda_handler
        Role: !GetAtt 'MattermostTeamsArchivalLambdaFunctionExecutionRole.Arn'
        Code:
          ZipFile: |
            import json
            import time
            import boto3
            import pprint
            import re
            import os
            
            pp = pprint.PrettyPrinter(indent=2)
            ssmClient = boto3.client('ssm')
            ec2Client = boto3.client('ec2')
            instanceName = os.environ.get('INSTANCE_NAME')
            
            def lambda_handler(event, context):
                
                archivalTeams = event.get('teams').get('archive') if event.get('teams').get('archive') != None else [];
                restoreTeams = event.get('teams').get('unarchive') if event.get('teams').get('unarchive') != None else [];
            
                commands = build_commands(archivalTeams, restoreTeams);
                run_command(commands);
                
                return {
                    'statusCode': 200
                }
                
            def build_commands(archival = [], unarchival = []):
                archiveCommand = 'bin/mattermost team archive'
                unarchiveCommand = 'bin/mattermost team restore'
                commands = []
                
                # Append list of team names to be archived
                for team in archival:
                    commands.append(archiveCommand + " " + team)
                    
                # Append list of team names to be restored
                for team in unarchival:
                    commands.append(unarchiveCommand + " " + team)
                    
                commands.append('bin/mattermost team list')
                
                print(commands)
                return commands
                
                
            def run_command(commands):
                try:
                    response = ssmClient.send_command(
                        Targets=[
                            {
                                'Key': 'tag:Name',
                                'Values': [
                                    instanceName
                                ]
                            },
                        ],
                        Parameters={
                            'commands': commands,
                            'workingDirectory': [
                                '/opt/mattermost'
                            ]
                        },
                        DocumentName='AWS-RunShellScript',
                        DocumentVersion='1',
                        CloudWatchOutputConfig={
                            'CloudWatchOutputEnabled': True
                        }
                    )
                except botocore.exceptions.ClientError as error:
                    print("Unexpected error running query: %s" % error)
                    raise error
                
                return response;
            # end functions        
          
        FunctionName: !Join ['-', [!Ref "AWS::StackName", 'team-archival-function']]
        Runtime: python3.9
        Timeout: 300

  Outputs:
    # InstanceId:
    #   Description: InstanceId of the newly created EC2 instance
    #   Value: !Ref MattermostNode
    # AZ:
    #   Description: Availability Zone of the newly created EC2 instance
    #   Value: !GetAtt 
    #     - MattermostNode
    #     - AvailabilityZone
    # MattermostS3BucketARN:
    #   Description: S3 Bucket used to save attachments by Mattermost
    #   Value: !Sub ["arn:aws:s3:::${bucket}", bucket: !Ref MattermostS3Bucket]
    ServiceURL:
      Description: The URL to access this Mattermost service
      Value: !Sub
        - "${HTTP}://${CustomDNSName}"
        - HTTP: !If [DoSSL, 'https', 'http']
          CustomDNSName: !Ref CustomDnsName
    LoadBalancerURL:
      Description: The Load Balancer URL
      Value: !Sub
        - "${HTTP}://${LoadBalancerDNSName}"
        - HTTP: !If [DoSSL, 'https', 'http']
          LoadBalancerDNSName: !GetAtt LoadBalancer.DNSName
    SGname:
      Description: The name of the SecurityGroup
      Value: !Ref SecurityGroup
      Export: {
        Name: !Join ['', [!Ref 'AWS::StackName', '-SGname']]
        }
    DBEndpointAddress:
      Description: The Database Connection String
      Value: !GetAtt DB.Outputs.RDSEndPointAddress
    
    MattermostTargetGroupARN:
      Description: The name of the load balancer of Mattermost cluster nodes
      Value: !Ref MainTargetGroup
  #   CloudWatchDashboardURL:
  #     Description: CloudWatch monitoring dashboard URL
  #     Value: !GetAtt CloudWatchDashboard.Outputs.Dashboard
  #     Condition: EnableCloudWatch
  